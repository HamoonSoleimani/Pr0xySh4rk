# .github/workflows/pr0xysh4rk_update.yml

name: Pr0xySh4rk_test Proxy Update

on:
  schedule:
    # Runs every day at 03:00 UTC (adjust as needed)
    - cron: '0 3 * * *'
  workflow_dispatch:  # Allows manual triggering from the Actions tab

# Set permissions for the GITHUB_TOKEN to allow pushing commits
permissions:
  contents: write

jobs:
  update-proxies:
    runs-on: ubuntu-latest
    timeout-minutes: 480 # 8 hours

    env:
      # --- User Configuration ---
      INPUT_FILE: "subs1.txt"             # Input file with subscription URLs
      OUTPUT_FILE: "SubscriptionLinks_test.txt" # Output file for tested/renamed configs
      SCRIPT_THREADS: 32                # Number of threads for the script
      SPEEDTEST_AMOUNT: "5000kb"        # Speedtest data amount (e.g., 5000kb, 10mb)
      CLEAR_CACHE_BEFORE_RUN: "false"   # Set to "true" to clear script cache before running
      FORCE_FETCH_NO_CACHE: "false"   # Set to "true" to force fetch subs ignoring cache

      # --- GeoIP Configuration ---
      # ** Using the specific URL you provided **
      GEOIP_DB_URL: "https://github.com/P3TERX/GeoLite.mmdb/releases/download/2025.03.28/GeoLite2-Country.mmdb"
      GEOIP_DB_FILENAME: "GeoLite2-Country.mmdb" # Expected filename after download
      # --- End GeoIP Configuration ---

      # --- End User Configuration ---

      # Internal - Path where xray-knife will be installed
      XRAY_KNIFE_INSTALL_DIR: "/usr/local/bin"
      XRAY_KNIFE_EXECUTABLE_NAME: "xray-knife"
      PYTHON_VERSION: '3.10' # Specify Python version

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip' # Cache pip dependencies

      - name: Install System Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends wget ca-certificates

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          # Install required and optional dependencies
          # ** Corrected: Install geoip2 library, not geoip2-database **
          pip install requests urllib3 tqdm geoip2 python-dotenv

      - name: Download and Install xray-knife (Latest)
        run: |
          set -e
          XRAY_KNIFE_DOWNLOAD_URL="https://github.com/lilendian0x00/xray-knife/releases/latest/download/${{ env.XRAY_KNIFE_EXECUTABLE_NAME }}_linux_amd64"
          INSTALL_PATH="${{ env.XRAY_KNIFE_INSTALL_DIR }}/${{ env.XRAY_KNIFE_EXECUTABLE_NAME }}"
          echo "Downloading xray-knife from ${XRAY_KNIFE_DOWNLOAD_URL}..."
          wget --quiet --show-progress --progress=bar:force:noscroll -O xray-knife-download "${XRAY_KNIFE_DOWNLOAD_URL}"
          echo "Installing xray-knife to ${INSTALL_PATH}..."
          sudo mv xray-knife-download "${INSTALL_PATH}"
          sudo chmod +x "${INSTALL_PATH}"
          echo "Verifying xray-knife installation..."
          if ! command -v ${{ env.XRAY_KNIFE_EXECUTABLE_NAME }} &> /dev/null; then
            echo "::error::${{ env.XRAY_KNIFE_EXECUTABLE_NAME }} command not found in PATH after installation attempt."
            exit 1
          fi
          echo "${{ env.XRAY_KNIFE_EXECUTABLE_NAME }} seems to be installed at $(command -v ${{ env.XRAY_KNIFE_EXECUTABLE_NAME }})"
          echo "xray-knife installed successfully."

      # Download GeoIP Database (Now always runs as URL is defined in env)
      - name: Download GeoIP Database
        run: |
          set -e
          echo "Downloading GeoIP Database from ${{ env.GEOIP_DB_URL }}..."
          wget --quiet --show-progress --progress=bar:force:noscroll \
                -O "${{ env.GEOIP_DB_FILENAME }}" \
                "${{ env.GEOIP_DB_URL }}"
          # Verify file exists
          if [ ! -f "${{ env.GEOIP_DB_FILENAME }}" ]; then
            echo "::error::GeoIP Database file '${{ env.GEOIP_DB_FILENAME }}' not found after download attempt from ${{ env.GEOIP_DB_URL }}."
            exit 1
          fi
          echo "GeoIP Database downloaded successfully to ${{ env.GEOIP_DB_FILENAME }}."

      - name: Run Pr0xySh4rk_test Script
        id: run_script
        run: |
          set -e # Exit immediately if script fails
          if [ ! -f Pr0xySh4rk.py ]; then
             echo "::error::Script Pr0xySh4rk.py not found in repository root."
             exit 1
          fi
          chmod +x Pr0xySh4rk.py

          if [ ! -f "${{ env.INPUT_FILE }}" ]; then
             echo "::warning::Input file '${{ env.INPUT_FILE }}' not found. The script might fail or produce no output."
             # Decide if this should be a fatal error: exit 1
          fi

          SCRIPT_ARGS=(
            "--input" "${{ env.INPUT_FILE }}"
            "--output" "${{ env.OUTPUT_FILE }}"
            "--threads" "${{ env.SCRIPT_THREADS }}"
            "--speedtest"
            "--speedtest-amount" "${{ env.SPEEDTEST_AMOUNT }}"
            "--ip-info"
            "--xray-knife-insecure"
            "--output-format" "text"
            # Add --verbose for debugging if needed
            # "--verbose"
          )

          if [ "${{ env.CLEAR_CACHE_BEFORE_RUN }}" == "true" ]; then
            SCRIPT_ARGS+=("--clear-cache")
          fi
          if [ "${{ env.FORCE_FETCH_NO_CACHE }}" == "true" ]; then
            SCRIPT_ARGS+=("--no-cache")
          fi

          # Add GeoIP DB argument using the downloaded file path
          if [ -f "${{ env.GEOIP_DB_FILENAME }}" ]; then
             echo "GeoIP database file found, adding --geoip-db argument."
             SCRIPT_ARGS+=("--geoip-db" "${{ env.GEOIP_DB_FILENAME }}")
          else
             # This shouldn't happen due to the check in the download step, but good failsafe
             echo "::error::GeoIP DB file '${{ env.GEOIP_DB_FILENAME }}' specified but not found!"
             exit 1
          fi

          XRAY_KNIFE_PATH=$(command -v ${{ env.XRAY_KNIFE_EXECUTABLE_NAME }})
          if [ -n "$XRAY_KNIFE_PATH" ]; then
            SCRIPT_ARGS+=("--xray-knife-path" "$XRAY_KNIFE_PATH")
          else
            echo "::warning::Could not find xray-knife in PATH, script might fail if non-WG configs are present."
          fi

          echo "Running Pr0xySh4rk.py with arguments:"
          printf "  %s\n" "${SCRIPT_ARGS[@]}"

          python3 Pr0xySh4rk.py "${SCRIPT_ARGS[@]}"

      - name: Commit and Push Changes
        if: success() # Run only if previous steps were successful
        run: |
          set -e
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          if [ ! -f "${{ env.OUTPUT_FILE }}" ]; then
            echo "Output file '${{ env.OUTPUT_FILE }}' not found after script execution. Nothing to commit."
            exit 0
          fi

          BRANCH_NAME="${{ github.ref_name }}"
          echo "Pulling latest changes from origin/${BRANCH_NAME}..."
          git pull --rebase --autostash origin "${BRANCH_NAME}" || {
            echo "::warning::Pull/rebase failed. Proceeding with caution."
          }

          git add "${{ env.OUTPUT_FILE }}"

          if git diff --staged --quiet; then
            echo "No changes detected in ${{ env.OUTPUT_FILE }}. Nothing to commit."
          else
            COMMIT_DATE=$(date -u +'%Y-%m-%d %H:%M:%S %Z')
            COMMIT_MSG="Update ${{ env.OUTPUT_FILE }} via Pr0xySh4rk (${COMMIT_DATE})"
            echo "Committing changes..."
            git commit -m "$COMMIT_MSG"

            echo "Pushing changes to origin/${BRANCH_NAME}..."
            RETRY_COUNT=5
            RETRY_DELAY=20
            n=0
            until [ $n -ge $RETRY_COUNT ]
            do
               git push origin "${BRANCH_NAME}" && break
               n=$((n+1))
               echo "Push attempt $n failed. Retrying in $RETRY_DELAY seconds..."
               sleep $RETRY_DELAY
               echo "Pulling again before retry..."
               git pull --rebase --autostash origin "${BRANCH_NAME}" || echo "Pull before retry failed, continuing push attempt..."
            done

            if [ $n -ge $RETRY_COUNT ]; then
              echo "::error::Failed to push changes after $RETRY_COUNT attempts."
              exit 1
            fi
            echo "Changes pushed successfully."
          fi
