# .github/workflows/pr0xysh4rk_update.yml

name: Pr0xySh4rk Proxy Update

on:
  schedule:
    # Runs every day at 03:00 UTC (adjust as needed)
    - cron: '0 3 * * *'
  workflow_dispatch:  # Allows manual triggering from the Actions tab

# Set permissions for the GITHUB_TOKEN to allow pushing commits
permissions:
  contents: write

jobs:
  update-proxies:
    runs-on: ubuntu-latest
    timeout-minutes: 480 # 8 hours

    env:
      # --- User Configuration ---
      INPUT_FILE: "url.txt"             # Input file with subscription URLs
      OUTPUT_FILE: "Pr0xySh4rk_SubBase64.txt" # Output file for tested/renamed configs
      SCRIPT_THREADS: 32                # Number of threads for the script
      SPEEDTEST_AMOUNT: "500kb"        # Speedtest data amount (e.g., 5000kb, 10mb)
      CLEAR_CACHE_BEFORE_RUN: "false"   # Set to "true" to clear script cache before running
      FORCE_FETCH_NO_CACHE: "false"   # Set to "true" to force fetch subs ignoring cache
      CONFIG_LIMIT_PER_PROTOCOL: 25     # <<<-- Number of configs to store per protocol

      # --- GeoIP Configuration ---
      GEOIP_DB_URL: "https://github.com/P3TERX/GeoLite.mmdb/releases/download/2025.03.28/GeoLite2-Country.mmdb"
      GEOIP_DB_FILENAME: "GeoLite2-Country.mmdb"
      # --- End GeoIP Configuration ---

      # --- End User Configuration ---

      # Internal - Path where xray-knife will be installed
      XRAY_KNIFE_INSTALL_DIR: "/usr/local/bin"
      XRAY_KNIFE_EXECUTABLE_NAME: "xray-knife" # The name we expect the script to use
      PYTHON_VERSION: '3.10'

      # --- xray-knife Specific ---
      XRAY_KNIFE_REPO: "lilendian0x00/xray-knife"
      # ** IMPORTANT: Adjust this asset name pattern if the repo changes it in future releases **
      XRAY_KNIFE_ASSET_PATTERN: "Xray-knife-linux-64.zip" # Matches the file in the release

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install System Dependencies
        run: |
          sudo apt-get update -qq
          # ** Added unzip and jq **
          sudo apt-get install -y --no-install-recommends wget ca-certificates unzip jq

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests urllib3 tqdm geoip2 python-dotenv

      # --- Updated xray-knife Installation ---
      - name: Download and Install xray-knife (Latest Release)
        run: |
          set -e
          INSTALL_PATH="${{ env.XRAY_KNIFE_INSTALL_DIR }}/${{ env.XRAY_KNIFE_EXECUTABLE_NAME }}"
          TEMP_DIR="xray_knife_temp"
          ZIP_NAME="xray-knife-release.zip"

          # 1. Get the latest release tag using GitHub API and jq
          echo "Fetching latest release tag for ${{ env.XRAY_KNIFE_REPO }}..."
          LATEST_TAG=$(curl -sL "https://api.github.com/repos/${{ env.XRAY_KNIFE_REPO }}/releases/latest" | jq -r ".tag_name")
          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" == "null" ]; then
            echo "::error::Failed to fetch latest release tag. API response might have changed or repo not found."
            exit 1
          fi
          echo "Latest tag: ${LATEST_TAG}"

          # 2. Construct the download URL
          # Use the pattern provided by the user's example URL structure
          XRAY_KNIFE_DOWNLOAD_URL="https://github.com/${{ env.XRAY_KNIFE_REPO }}/releases/download/${LATEST_TAG}/${{ env.XRAY_KNIFE_ASSET_PATTERN }}"
          echo "Constructed download URL: ${XRAY_KNIFE_DOWNLOAD_URL}"

          # 3. Download the zip archive
          echo "Downloading xray-knife release ${LATEST_TAG}..."
          wget --quiet --show-progress --progress=bar:force:noscroll \
               -O "${ZIP_NAME}" \
               "${XRAY_KNIFE_DOWNLOAD_URL}"

          # 4. Unzip the archive
          echo "Unzipping ${ZIP_NAME}..."
          mkdir -p "${TEMP_DIR}"
          unzip -o "${ZIP_NAME}" -d "${TEMP_DIR}"

          # 5. Find and install the executable
          # ** Assuming the executable inside the zip is named 'xray-knife' **
          # If the name inside the zip is different (e.g., 'Xray-knife'), adjust the path below
          EXECUTABLE_IN_ZIP="${TEMP_DIR}/xray-knife" # Adjust if needed
          if [ ! -f "${EXECUTABLE_IN_ZIP}" ]; then
             echo "::error::Executable '${EXECUTABLE_IN_ZIP}' not found inside the unzipped archive. Contents:"
             ls -lha "${TEMP_DIR}"
             # Try finding variations (case-insensitive)
             FOUND_EXEC=$(find "${TEMP_DIR}" -maxdepth 1 -type f -iname 'xray-knife*' | head -n 1)
             if [ -n "$FOUND_EXEC" ]; then
               echo "Found potential executable: ${FOUND_EXEC}"
               EXECUTABLE_IN_ZIP=$FOUND_EXEC
             else
               exit 1 # Still couldn't find it
             fi
          fi
          echo "Found executable: ${EXECUTABLE_IN_ZIP}"
          echo "Installing executable to ${INSTALL_PATH}..."
          sudo mv "${EXECUTABLE_IN_ZIP}" "${INSTALL_PATH}"
          sudo chmod +x "${INSTALL_PATH}"

          # 6. Clean up
          echo "Cleaning up..."
          rm -f "${ZIP_NAME}"
          rm -rf "${TEMP_DIR}"

          # 7. Verify installation
          echo "Verifying xray-knife installation..."
          if ! command -v ${{ env.XRAY_KNIFE_EXECUTABLE_NAME }} &> /dev/null; then
            echo "::error::${{ env.XRAY_KNIFE_EXECUTABLE_NAME }} command not found in PATH after installation attempt."
            exit 1
          fi
          echo "${{ env.XRAY_KNIFE_EXECUTABLE_NAME }} seems to be installed at $(command -v ${{ env.XRAY_KNIFE_EXECUTABLE_NAME }})"
          echo "xray-knife installed successfully."
      # --- End of Updated xray-knife Installation ---

      - name: Download GeoIP Database
        run: |
          set -e
          echo "Downloading GeoIP Database from ${{ env.GEOIP_DB_URL }}..."
          wget --quiet --show-progress --progress=bar:force:noscroll \
                -O "${{ env.GEOIP_DB_FILENAME }}" \
                "${{ env.GEOIP_DB_URL }}"
          if [ ! -f "${{ env.GEOIP_DB_FILENAME }}" ]; then
            echo "::error::GeoIP Database file '${{ env.GEOIP_DB_FILENAME }}' not found after download attempt from ${{ env.GEOIP_DB_URL }}."
            exit 1
          fi
          echo "GeoIP Database downloaded successfully to ${{ env.GEOIP_DB_FILENAME }}."

      - name: Run Pr0xySh4rk Script
        id: run_script
        run: |
          set -e
          if [ ! -f Pr0xySh4rk.py ]; then
             echo "::error::Script Pr0xySh4rk.py not found in repository root."
             exit 1
          fi
          chmod +x Pr0xySh4rk.py

          if [ ! -f "${{ env.INPUT_FILE }}" ]; then
             echo "::warning::Input file '${{ env.INPUT_FILE }}' not found."
          fi

          SCRIPT_ARGS=(
            "--input" "${{ env.INPUT_FILE }}"
            "--output" "${{ env.OUTPUT_FILE }}"
            "--threads" "${{ env.SCRIPT_THREADS }}"
            "--speedtest"
            "--speedtest-amount" "${{ env.SPEEDTEST_AMOUNT }}"
            "--ip-info"
            "--xray-knife-insecure"
            "--output-format" "base64"
            "--limit" "${{ env.CONFIG_LIMIT_PER_PROTOCOL }}" # <<<-- Added limit argument using env variable
          )

          if [ "${{ env.CLEAR_CACHE_BEFORE_RUN }}" == "true" ]; then
            SCRIPT_ARGS+=("--clear-cache")
          fi
          if [ "${{ env.FORCE_FETCH_NO_CACHE }}" == "true" ]; then
            SCRIPT_ARGS+=("--no-cache")
          fi

          if [ -f "${{ env.GEOIP_DB_FILENAME }}" ]; then
             SCRIPT_ARGS+=("--geoip-db" "${{ env.GEOIP_DB_FILENAME }}")
          else
             echo "::error::GeoIP DB file '${{ env.GEOIP_DB_FILENAME }}' specified but not found!"
             exit 1
          fi

          XRAY_KNIFE_PATH=$(command -v ${{ env.XRAY_KNIFE_EXECUTABLE_NAME }})
          if [ -n "$XRAY_KNIFE_PATH" ]; then
            SCRIPT_ARGS+=("--xray-knife-path" "$XRAY_KNIFE_PATH")
          else
            echo "::error::Could not find xray-knife in PATH after installation. Cannot run script."
            exit 1
          fi

          echo "Running Pr0xySh4rk.py with arguments:"
          printf "  %s\n" "${SCRIPT_ARGS[@]}"

          python3 Pr0xySh4rk.py "${SCRIPT_ARGS[@]}"

      - name: Commit and Push Changes
        if: success()
        run: |
          set -e
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          if [ ! -f "${{ env.OUTPUT_FILE }}" ]; then
            echo "Output file '${{ env.OUTPUT_FILE }}' not found after script execution. Nothing to commit."
            exit 0
          fi

          BRANCH_NAME="${{ github.ref_name }}"
          echo "Pulling latest changes from origin/${BRANCH_NAME}..."
          git pull --rebase --autostash origin "${BRANCH_NAME}" || {
            echo "::warning::Pull/rebase failed. Proceeding with caution."
          }

          git add "${{ env.OUTPUT_FILE }}"

          if git diff --staged --quiet; then
            echo "No changes detected in ${{ env.OUTPUT_FILE }}. Nothing to commit."
          else
            COMMIT_DATE=$(date -u +'%Y-%m-%d %H:%M:%S %Z')
            COMMIT_MSG="Update ${{ env.OUTPUT_FILE }} via Pr0xySh4rk (${COMMIT_DATE})"
            echo "Committing changes..."
            git commit -m "$COMMIT_MSG"

            echo "Pushing changes to origin/${BRANCH_NAME}..."
            RETRY_COUNT=5
            RETRY_DELAY=20
            n=0
            until [ $n -ge $RETRY_COUNT ]
            do
               git push origin "${BRANCH_NAME}" && break
               n=$((n+1))
               echo "Push attempt $n failed. Retrying in $RETRY_DELAY seconds..."
               sleep $RETRY_DELAY
               echo "Pulling again before retry..."
               git pull --rebase --autostash origin "${BRANCH_NAME}" || echo "Pull before retry failed, continuing push attempt..."
            done

            if [ $n -ge $RETRY_COUNT ]; then
              echo "::error::Failed to push changes after $RETRY_COUNT attempts."
              exit 1
            fi
            echo "Changes pushed successfully."
          fi
