# .github/workflows/pr0xysh4rk_enhanced_update.yml

name: Pr0xySh4rk Enhanced Proxy Update (Iran Focus)

on:
  schedule:
    # Runs every 6 hours (adjust frequency as needed)
    - cron: '0 */6 * * *'
  workflow_dispatch:  # Allows manual triggering from the Actions tab

# Set permissions for the GITHUB_TOKEN to allow pushing commits
permissions:
  contents: write

jobs:
  update-proxies:
    runs-on: ubuntu-latest
    timeout-minutes: 480 # 8 hours (Keep generous timeout for extensive testing)

    env:
      # --- User Configuration ---
      # Input/Output Files
      INPUT_FILE: "url.txt"             # Input file with subscription URLs (relative to repo root)
      OUTPUT_FILE: "Pr0xySh4rk_test.txt" # Output file for tested/renamed configs (relative to repo root)
      OUTPUT_CSV_FILE: ""             # Optional: Path for detailed CSV output (e.g., "detailed_results.csv"), leave empty to disable
      OUTPUT_JSON_FILE: ""            # Optional: Path for detailed JSON output (e.g., "detailed_results.json"), leave empty to disable

      # Script Behavior
      SCRIPT_THREADS: 32                # Number of threads for the script's concurrent operations
      SPEEDTEST_AMOUNT: "500kb"         # Speedtest data amount for xray-knife tests (e.g., "500kb", "5mb")
      CONFIG_LIMIT_PER_PROTOCOL: 45     # Max number of best configs *per protocol* to save in the output file
      CONFIG_NAME_PREFIX: "Pr0xySh4rk"  # Prefix used when renaming configs in the output file
      ENABLE_SPEEDTEST: "true"          # Set to "true" to run speed tests (xray-knife only), "false" to disable
      SHOW_PROTOCOL_STATS: "true"       # Set to "true" to print protocol summary stats at the end
      SCRIPT_VERBOSE_LEVEL: 1           # Verbosity level for script output: 0=Normal, 1=Verbose (-v), 2=Very Verbose (-vv)

      # Cache Control
      CLEAR_CACHE_BEFORE_RUN: "false"   # Set to "true" to clear script's internal cache before running
      FORCE_FETCH_NO_CACHE: "false"     # Set to "true" to force fetch subscriptions, ignoring cache

      # --- End User Configuration ---

      # --- Internal Settings (Usually no need to change) ---
      XRAY_KNIFE_INSTALL_DIR: "/usr/local/bin"
      XRAY_KNIFE_EXECUTABLE_NAME: "xray-knife"
      PYTHON_VERSION: '3.10'
      XRAY_KNIFE_REPO: "lilendian0x00/xray-knife"
      XRAY_KNIFE_ASSET_PATTERN: "Xray-knife-linux-64.zip" # Adjust if upstream release naming changes

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Fetch history is needed for git pull/push operations
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install System Dependencies
        run: |
          sudo apt-get update -qq
          # Install tools needed for xray-knife download/install and general utilities
          sudo apt-get install -y --no-install-recommends wget ca-certificates unzip jq git

      - name: Install Python Dependencies (Core + Optional for Script)
        run: |
          python -m pip install --upgrade pip
          # Install required libs for the enhanced script (NO geoip2)
          # ipaddress is usually built-in for Python 3.3+
          pip install requests urllib3 tqdm python-dotenv

      # --- Using the robust xray-knife Installation block from your original workflow ---
      - name: Download and Install xray-knife (Latest Release)
        id: install_xray_knife
        run: |
          set -e
          INSTALL_PATH="${{ env.XRAY_KNIFE_INSTALL_DIR }}/${{ env.XRAY_KNIFE_EXECUTABLE_NAME }}"
          TEMP_DIR="xray_knife_temp"
          ZIP_NAME="xray-knife-release.zip"

          # 1. Get the latest release tag using GitHub API and jq
          echo "Fetching latest release tag for ${{ env.XRAY_KNIFE_REPO }}..."
          API_URL="https://api.github.com/repos/${{ env.XRAY_KNIFE_REPO }}/releases/latest"
          # Handle potential rate limiting by adding a small delay/retry or using GITHUB_TOKEN? For now, direct curl.
          LATEST_TAG=$(curl -sL "${API_URL}" | jq -r ".tag_name")
          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" == "null" ]; then
            echo "::error::Failed to fetch latest release tag from ${API_URL}. API response might have changed, repo not found, or rate limited."
            # Attempt fetching releases list as fallback
            echo "Attempting fallback: fetching releases list..."
            LATEST_TAG=$(curl -sL "https://api.github.com/repos/${{ env.XRAY_KNIFE_REPO }}/releases" | jq -r '.[0].tag_name')
            if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" == "null" ]; then
               echo "::error::Fallback failed. Cannot determine latest xray-knife release tag."
               exit 1
            fi
            echo "Fallback successful. Using tag: ${LATEST_TAG}"
          else
            echo "Latest tag found: ${LATEST_TAG}"
          fi


          # 2. Construct the download URL
          XRAY_KNIFE_DOWNLOAD_URL="https://github.com/${{ env.XRAY_KNIFE_REPO }}/releases/download/${LATEST_TAG}/${{ env.XRAY_KNIFE_ASSET_PATTERN }}"
          echo "Constructed download URL: ${XRAY_KNIFE_DOWNLOAD_URL}"

          # 3. Download the zip archive using wget
          echo "Downloading xray-knife release ${LATEST_TAG}..."
          wget --quiet --show-progress --progress=bar:force:noscroll \
               -O "${ZIP_NAME}" \
               "${XRAY_KNIFE_DOWNLOAD_URL}"

          # 4. Unzip the archive
          echo "Unzipping ${ZIP_NAME}..."
          mkdir -p "${TEMP_DIR}"
          unzip -o "${ZIP_NAME}" -d "${TEMP_DIR}"

          # 5. Find and install the executable (handle potential subdirs or different names)
          EXECUTABLE_IN_ZIP=$(find "${TEMP_DIR}" -type f \( -name 'xray-knife' -o -name 'xray-knife.exe' \) | head -n 1)

          if [ -z "${EXECUTABLE_IN_ZIP}" ]; then
             echo "::error::Executable 'xray-knife' not found inside the unzipped archive in ${TEMP_DIR}. Contents:"
             ls -lha "${TEMP_DIR}"
             # Try finding any executable file as a last resort
             EXECUTABLE_IN_ZIP=$(find "${TEMP_DIR}" -maxdepth 1 -type f -executable | head -n 1)
             if [ -z "${EXECUTABLE_IN_ZIP}" ]; then
                echo "::error::Could not find any executable in the archive."
                exit 1
             else
                echo "::warning::Found alternative executable: ${EXECUTABLE_IN_ZIP}. Using this."
             fi
          fi

          echo "Found executable: ${EXECUTABLE_IN_ZIP}"
          echo "Installing executable to ${INSTALL_PATH}..."
          sudo mv "${EXECUTABLE_IN_ZIP}" "${INSTALL_PATH}"
          sudo chmod +x "${INSTALL_PATH}"

          # 6. Clean up
          echo "Cleaning up temporary files..."
          rm -f "${ZIP_NAME}"
          rm -rf "${TEMP_DIR}"

          # 7. Verify installation by checking if command exists in PATH
          echo "Verifying xray-knife installation..."
          if ! command -v ${{ env.XRAY_KNIFE_EXECUTABLE_NAME }} &> /dev/null; then
            echo "::error::'${{ env.XRAY_KNIFE_EXECUTABLE_NAME }}' command not found in PATH after installation attempt."
            echo "PATH is: $PATH"
            echo "Contents of install dir (${{ env.XRAY_KNIFE_INSTALL_DIR }}):"
            ls -lha ${{ env.XRAY_KNIFE_INSTALL_DIR }}
            exit 1
          fi
          INSTALLED_PATH=$(command -v ${{ env.XRAY_KNIFE_EXECUTABLE_NAME }})
          echo "'${{ env.XRAY_KNIFE_EXECUTABLE_NAME }}' is available at: ${INSTALLED_PATH}"
          echo "xray-knife installed successfully."
          # Set output for the next step
          echo "xray_knife_path=${INSTALLED_PATH}" >> $GITHUB_OUTPUT
      # --- End of xray-knife Installation ---

      # --- GeoIP Download Step Removed ---

      - name: Run Pr0xySh4rk Enhanced Script
        id: run_script
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          SCRIPT_NAME="Pr0xySh4rk_new.py" # Assuming the script is named this in your repo root

          if [ ! -f "${SCRIPT_NAME}" ]; then
             echo "::error::Script '${SCRIPT_NAME}' not found in repository root."
             exit 1
          fi
          chmod +x "${SCRIPT_NAME}"

          if [ ! -f "${{ env.INPUT_FILE }}" ]; then
             # This is just a warning, the script might handle missing input file
             echo "::warning::Input file '${{ env.INPUT_FILE }}' not found."
          fi

          # Build the arguments array dynamically
          declare -a SCRIPT_ARGS
          SCRIPT_ARGS+=( "--input" "${{ env.INPUT_FILE }}" )
          SCRIPT_ARGS+=( "--output" "${{ env.OUTPUT_FILE }}" )
          SCRIPT_ARGS+=( "--threads" "${{ env.SCRIPT_THREADS }}" )
          SCRIPT_ARGS+=( "--limit" "${{ env.CONFIG_LIMIT_PER_PROTOCOL }}" )
          SCRIPT_ARGS+=( "--name-prefix" "${{ env.CONFIG_NAME_PREFIX }}" )
          SCRIPT_ARGS+=( "--output-format" "base64" ) # Hardcoded base64 for this example
          SCRIPT_ARGS+=( "--xray-knife-insecure" ) # Often needed for diverse configs

          # Add optional CSV/JSON outputs
          if [ -n "${{ env.OUTPUT_CSV_FILE }}" ]; then
            SCRIPT_ARGS+=( "--output-csv" "${{ env.OUTPUT_CSV_FILE }}" )
          fi
          if [ -n "${{ env.OUTPUT_JSON_FILE }}" ]; then
            SCRIPT_ARGS+=( "--output-json" "${{ env.OUTPUT_JSON_FILE }}" )
          fi

          # Add speedtest flag if enabled
          if [ "${{ env.ENABLE_SPEEDTEST }}" == "true" ]; then
            SCRIPT_ARGS+=( "--speedtest" )
            SCRIPT_ARGS+=( "--speedtest-amount" "${{ env.SPEEDTEST_AMOUNT }}" )
          fi

          # Add verbosity flags
          if [ "${{ env.SCRIPT_VERBOSE_LEVEL }}" == "1" ]; then
            SCRIPT_ARGS+=( "-v" )
          elif [ "${{ env.SCRIPT_VERBOSE_LEVEL }}" == "2" ]; then
            SCRIPT_ARGS+=( "-vv" )
          fi

          # Add cache control flags
          if [ "${{ env.CLEAR_CACHE_BEFORE_RUN }}" == "true" ]; then
            SCRIPT_ARGS+=("--clear-cache")
          fi
          if [ "${{ env.FORCE_FETCH_NO_CACHE }}" == "true" ]; then
            SCRIPT_ARGS+=("--no-cache")
          fi

          # Add protocol stats flag
          if [ "${{ env.SHOW_PROTOCOL_STATS }}" == "true" ]; then
            SCRIPT_ARGS+=("--protocol-stats")
          fi

          # <<<--- GeoIP arguments (--ip-info, --geoip-db) are NOT added --->>>

          # Add xray-knife path from the previous step's output
          XRAY_KNIFE_PATH_DETECTED="${{ steps.install_xray_knife.outputs.xray_knife_path }}"
          if [ -n "$XRAY_KNIFE_PATH_DETECTED" ]; then
            SCRIPT_ARGS+=("--xray-knife-path" "$XRAY_KNIFE_PATH_DETECTED")
          else
            # Double-check using command -v as a fallback
            XRAY_KNIFE_PATH_CMD=$(command -v ${{ env.XRAY_KNIFE_EXECUTABLE_NAME }})
             if [ -n "$XRAY_KNIFE_PATH_CMD" ]; then
               echo "::warning::Could not get xray-knife path from step output, but found via command -v: $XRAY_KNIFE_PATH_CMD"
               SCRIPT_ARGS+=("--xray-knife-path" "$XRAY_KNIFE_PATH_CMD")
             else
               echo "::error::Could not find xray-knife path. Cannot run script."
               exit 1
             fi
          fi

          echo "Running ${SCRIPT_NAME} with arguments:"
          # Print arguments one per line for clarity in logs
          printf "  %s\n" "${SCRIPT_ARGS[@]}"

          # Execute the script
          python3 "${SCRIPT_NAME}" "${SCRIPT_ARGS[@]}"

          echo "Script execution finished."

      # --- Using the robust Commit/Push block from your original workflow ---
      - name: Commit and Push Changes
        # Run this step even if the script step fails partially but produces an output file,
        # or if the script succeeded. Use `if: always()` if you want to commit even on failure.
        # `if: success()` only runs if the previous steps were successful.
        # `if: failure()` only runs if a previous step failed.
        # Let's stick with `if: success()` assuming the goal is to commit *working* results.
        if: success()
        run: |
          set -e # Exit on error

          # Configure Git user
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Check if the main output file exists
          if [ ! -f "${{ env.OUTPUT_FILE }}" ]; then
            echo "Main output file '${{ env.OUTPUT_FILE }}' not found after script execution. Nothing to commit."
            exit 0 # Exit successfully, no changes to commit
          fi

          # Determine the current branch name
          BRANCH_NAME="${{ github.ref_name }}"
          echo "Current branch: ${BRANCH_NAME}"

          # Pull latest changes from the remote branch with rebase and auto-stashing local changes
          # This helps avoid merge conflicts if the remote branch was updated during the workflow run
          echo "Pulling latest changes from origin/${BRANCH_NAME} with rebase..."
          git pull --rebase --autostash origin "${BRANCH_NAME}" || {
            echo "::warning::'git pull --rebase' failed. This might be due to complex conflicts. Attempting push anyway, but manual intervention might be needed later."
            # Optionally, you could try 'git pull' without rebase as a fallback, but it creates merge commits.
          }

          # Add the main output file and any optional output files that were generated
          echo "Adding files to staging area..."
          git add "${{ env.OUTPUT_FILE }}"
          if [ -n "${{ env.OUTPUT_CSV_FILE }}" ] && [ -f "${{ env.OUTPUT_CSV_FILE }}" ]; then
            git add "${{ env.OUTPUT_CSV_FILE }}"
            echo "Added optional file: ${{ env.OUTPUT_CSV_FILE }}"
          fi
           if [ -n "${{ env.OUTPUT_JSON_FILE }}" ] && [ -f "${{ env.OUTPUT_JSON_FILE }}" ]; then
            git add "${{ env.OUTPUT_JSON_FILE }}"
            echo "Added optional file: ${{ env.OUTPUT_JSON_FILE }}"
          fi

          # Check if there are any changes staged for commit
          if git diff --staged --quiet; then
            echo "No changes detected in the output files. Nothing to commit."
          else
            echo "Changes detected in output files."
            # Create commit message with timestamp
            COMMIT_DATE=$(date -u +'%Y-%m-%d %H:%M:%S %Z')
            COMMIT_MSG="Update proxy configs via Pr0xySh4rk (${COMMIT_DATE})"

            echo "Committing changes..."
            git commit -m "$COMMIT_MSG"

            # Push changes back to the origin branch with retries
            echo "Pushing changes to origin/${BRANCH_NAME}..."
            RETRY_COUNT=5
            RETRY_DELAY=20 # Seconds between retries
            n=0
            until [ $n -ge $RETRY_COUNT ]
            do
               # Use --force-with-lease for safer force pushes if needed after rebase issues,
               # but standard push should work if rebase was clean.
               git push origin "${BRANCH_NAME}" && break # Exit loop on success
               n=$((n+1))
               echo "Push attempt $n failed. Retrying in $RETRY_DELAY seconds..."
               sleep $RETRY_DELAY
               # Optional: Pull again before retry, might help if remote changed again
               echo "Pulling again before retry..."
               git pull --rebase --autostash origin "${BRANCH_NAME}" || echo "::warning::Pull before retry failed, continuing push attempt..."
            done

            # Check if push ultimately failed
            if [ $n -ge $RETRY_COUNT ]; then
              echo "::error::Failed to push changes to origin/${BRANCH_NAME} after $RETRY_COUNT attempts."
              # Consider alternative actions here, like creating an issue or artifact?
              exit 1
            fi
            echo "Changes pushed successfully to origin/${BRANCH_NAME}."
          fi
